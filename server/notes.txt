 COMMANDS ON TERMINAL

 1)mkdir server
 2)cd server
 3)npm i express body-parser bcrypt cors dotenv gridfs-stream multer multer-gridfs-storage helmet mo
rgan jsonwebtoken mongoose
4)npm init -y
it will create a new package.json file in the current directory without asking you any questions, as it automatically assumes "yes" for all the prompts.




IMPORTS:

1)import dotenv from "dotenv";
*The dotenv library allows you to store configuration data, API keys, or other sensitive information in a .env file, separate from your codebase
*Instead of hardcoding these values into the code, which can be a security risk and require code changes for different environments, developers use environment variables to keep these settings separate from the codebase.



CONFIGURATIONS:


const __filename = fileURLToPath(import.meta.url);
it gets the file URL of the current module using import.meta.url (In Node.js, the import.meta object provides information about the current module being executed. The import.meta.url property contains the full URL of the current module's file location.) and then converts it to a file path using fileURLToPath, storing the result in the __filename variable(it is a common convention)
Why it is needed to convert URL to path?--many Node.js modules and APIs expect and operate with file paths. 


const __dirname = path.dirname(__filename);
The path module is a built-in module in Node.js that provides utilities for working with file and directory paths. path.dirname() is one of the functions available in this module, and it returns the directory name of a given file path.
In this line, path.dirname(__filename) takes the previously obtained __filename (which holds the absolute file path of the current module) and extracts its directory name, assigning it to the __dirname variable.


dotenv.config();
The dotenv.config() call reads the variables from the .env file and makes them available to the application through process.env.


const app = express();
 You can think of app as a mini-app that can handle routes, middleware, and other functionalities provided by Express.


app.use(express.json());
This line adds the built-in Express middleware express.json(). It is used to parse incoming requests with JSON data. When the server receives a request with a JSON body, this middleware parses the JSON data and makes it accessible via req.body in your route handlers.

app.use(helmet());
*This line adds the helmet middleware, which is used for securing your Express application by setting various HTTP headers to improve security. Helmet helps protect against common web vulnerabilities.
 *Common web vulnerabilities for example- it informs the browser to always access the application over HTTPS, even if the user types "http://" in the address bar.


app.use(helmet.crossOriginResourcePolicy({ policy: "cross-origin" }));
*This line enables the Cross-Origin Resource Policy (CORP) by using the helmet.crossOriginResourcePolicy middleware. The specified policy is set to "cross-origin," which allows cross-origin access to the resources on the server. 
*this is useful for granting permissions to web pages  hosted on different domains to make requests to your server and access specific resources (e.g., APIs, files, data) hosted on your server.
*(In web development, a same-origin policy is enforced by web browsers as a security measure. This policy restricts web pages from making requests to a different domain than the one from which they originated. For example, a web page hosted on example.com cannot directly make an AJAX request to fetch data from api.example2.com due to the same-origin policy.)



app.use(morgan("common"));
*This line adds the morgan middleware, which is a popular logger for Express applications.
 *It logs information about each incoming request, such as the request method, status, response time, and more. 
 *The "common" parameter passed to morgan specifies the predefined log format to use.



app.use(bodyParser.json({ limit: "30mb", extended: true }));


app.use(bodyParser.urlencoded({ limit: "30mb", extended: true }));
*middleware that extracts the body portion of an incoming HTTP request and makes it available in the req.body property.
 * urlencoded  because we will use URL for accessing body
*bodyParser.urlencoded() middleware will handle form data up to the default limit.If the form data exceeds the default limit, it will be truncated or rejected, and your server won't receive the entire request body.(The default limit-100kb or less.)


app.use(cors());
can be used but not used yet


app.use("/assets", express.static(path.join(__dirname, "public/assets")));
*means that any request to URLs starting with "/assets" will trigger the express.static middleware to look for the corresponding file in the "public/assets" directory of your project and serve it back to the client.
*(__dirname, "public/assets") : constructs the absolute path to the directory containing the static files. __dirname is a Node.js global variable that represents the current directory where the script is located
*path.join() is a method from the built-in path module in Node.js that joins the provided path segments to create a valid path. The result Will be same if you don't use it.
*For example, if you have an image file named "logo.png" located at "public/assets/logo.png" in your project, a request to "/assets/logo.png" will fetch and serve that file to the client, allowing the image to be displayed on a web page.
*This middleware setup is commonly used to serve static files, such as images, stylesheets, client-side JavaScript files, or other assets that don't need to be processed dynamically by the server.It's an efficient way to serve such files directly to the client, improving the performance and load times of your web pages.




FILE STORAGE


const storage = multer.diskStorage({
    destination: function(req,file,cb){
        cb(null,"public/assets");
    };
    filename: function0req, file,cb){
        cb(null,file.originalname);
    },
});
const upload= multer({storage});




STEP1- CREATE STORAGE CONFIGURATION OBJECT

*to define how the uploaded files should be stored on the server.

1)const storage = multer.diskStorage({ ... });: This line creates a diskStorage configuration object for multer. The diskStorage is one of the two built-in storage engines provided by multer, the other being memoryStorage. The diskStorage engine allows you to define the destination directory and file naming strategy for the uploaded files.
* "storage engine" refers to a  module that defines how uploaded files should be stored and managed on the server's file system or in cloud storage.

2)destination: function (req, file, cb) { ... }: 
This is a function that determines the destination directory where the uploaded files will be stored. It takes three arguments:
req: The Express.js request object.
file: An object representing the uploaded file.
cb: A callback function to signal the destination directory.

3) cb(null,"public/assets");
cb function is used to pass an error (if any) as the first argument and the destination directory as the second argument. In this case, the first argument null represents that there is no error, and the second argument "public/assets" specifies the destination directory where the uploaded files should be stored.

4)filename: function (req, file, cb) { ... }
This is a function that determines the filename for the uploaded file. It takes the same three arguments as the destination function. In this example, the filename is set to the original name of the uploaded file, which means the uploaded file will retain its original name.

STEP2 - Initialize Multer Middleware with the Storage Configuration
const upload = multer({ storage });
After creating the storage configuration object, you pass it to multer to create the actual middleware function that handles file uploads.
*cb(null,"public/assets")--the { storage } syntax is an ES6 shorthand notation that is used when the property name and value have the same name. It is equivalent to { storage: storage }, but since the property name matches the variable name, you can use the shorthand.

STEP3- Use Multer Middleware with Express-
Finally, you use the created multer middleware function with app.use() or within specific routes in your Express application to handle file uploads.



MAKE AN .env file
MONGO_URL="mongodb+srv://dummyuser:<password>@cluster0.2cozgta.mongodb.net/?retryWrites=true&w=majority";
PORT=3001


MONGOOSE SETUP
this code sets up a server using Express and connects it to a MongoDB database using Mongoose

const PORT = process.env.PORT || 6001;
mongoose
.connect(process.env.MONGO_URL,{
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(()=>
    app.listen(PORT,()=>
        console.log(`server running on port ${PORT}`)
    ))

.catch((error)=>console.log(`${error} did not connect`));


1)process.env.PORT
*If you do not define your port, process.env.PORT will likely be undefined, and if you use const PORT = process.env.PORT || 3000;, the default port number 3000 will be used.
*const PORT = process.env.PORT || 6001;: This line sets up the port on which the server will listen for incoming HTTP requests. It uses the process.env.PORT environment variable to dynamically set the port


2)mongoose.connect(process.env.MONGO_URL, { useNewUrlParser: true, useUnifiedTopology: true })
 This line connects the server to a MongoDB database. It uses the MONGO_URL environment variable to specify the MongoDB connection URI. The useNewUrlParser and useUnifiedTopology options are provided to avoid deprecation warnings when using the latest versions of Mongoose and MongoDB.

3).then(() => { app.listen(PORT, () => console.log(Server Port: ${PORT})); })
 This part of the code is a Promise chain. It registers a .then() callback, which executes when the database connection is successfully established. Inside this callback, the Express app starts listening for incoming HTTP requests on the specified PORT.

4).catch((error) => console.log(${error} did not connect));: This part of the code is another Promise chain. If there is an error while connecting to the MongoDB database, the .catch() callback will execute, and an error message will be logged to the console.

5)(process.env.PORT and process.env.MONGO_URL) allows for easy configuration and deployment, as you can change these values depending on the environment (development, production, etc.) without modifying the code itself.








AUTHENTICATION- When a user register or login
Authorisation- once a user is Locked in you perform some actions like the user can see posts only if she/he is logged in

ROUTES WITH FILES

app.post("/auth/register" , upload.single("picture"), register);

 *upload is the middleware by using this we are going to upload the picture In assets folder.
 *Register-To save the user in the database this is the main logic in this


 import {register} from "controllers/auth.js";
make a folder in server- controllers> make a file- auth.js


AUTH.JS

import bcrypt from "bcrypt";
 to encrypt our password before storing it in the database

import jwt from "jsonwebtoken";
This will help us to send the user of web token which they can use for  Authentication and authorisation
  

import User from "../models/User.js";
It imports the User model from "../models/User.js". This model will be used to create and save the new user's data in the database.

Server > create folder models > create file user.js

 


USER.JS

import mongoose from "mongoose";
* mongoose- This refers to the Mongoose library for MongoDB and Node.js. It allows developers to interact with MongoDB using JavaScript objects 
*Will help you set our model


const UserSchema = new mongoose.Schema(
  {
    firstName: {
      type: String,
      required: true,
      min: 2,
      max: 50,
    },
    lastName: {
      type: String,
      required: true,
      min: 2,
      max: 50,
    },
    email: {
      type: String,
      required: true,
      max: 50,
      unique: true,
    },
    password: {
      type: String,
      required: true,
      min: 5,
    },
    picturePath: {
      type: String,
      default: "",
    },
    friends: {
      type: Array,
      default: [],
    },
    location: String,
    occupation: String,
    viewedProfile: Number,
    impressions: Number,
  },
  { timestamps: true }

);

const User = mongoose.model("User", UserSchema);
export default User;





*const UserSchema = new mongoose.Schema
UserSchema: This is the schema or blueprint for the documents in the "User" collection
describes the structure and properties of the documents that can be stored in the "User" collection.

* { timestamps: true } - this will give us dates when it was created, updated

*const User = mongoose.model("User", UserSchema);
-creates a Mongoose model named "User" using the mongoose.model() method
-A Mongoose model is a JavaScript class that maps to a MongoDB collection and defines the shape of the documents within that collection.
-"User":  name of the model. 


 

 AUTH.JS

 export const register = async (req, res) => {
  try {
    const {
      firstName,
      lastName,
      email,
      password,
      picturePath,
      friends,
      location,
      occupation,
    } = req.body;

    const salt = await bcrypt.genSalt();
    const passwordHash = await bcrypt.hash(password, salt);

    const newUser = new User({
      firstName,
      lastName,
      email,
      password: passwordHash,
      picturePath,
      friends,
      location,
      occupation,
      viewedProfile: Math.floor(Math.random() * 10000),
      impressions: Math.floor(Math.random() * 10000),
    });
    const savedUser = await newUser.save();
    res.status(201).json(savedUser);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

* The register function is an asynchronous function that accepts a req (request) and res (response) as its parameters.
- It handles the registration process when a new user signs up.
- An asynchronous function is a type of function in programming that allows non-blocking execution. When an asynchronous function is called, it doesn't block the program's execution but continues to execute other code while waiting for the asynchronous task to complete. This allows the program to be more responsive and efficient



try {
  // Code that might throw an error (exceptions)
} catch (error) {
  // Code to handle the error
}


*try {
    const {
      firstName,
      lastName.....
    } = req.body;

we are doing Array destructuring. this is same as:
const firstName = req.body.firstName;
const lastName = req.body.lastName;
const email = req.body.email;......


const salt = await bcrypt.genSalt();
-calls the asynchronous function bcrypt.genSalt()
-The genSalt() function generates a new random salt that will be used to hash the password.
-await- If you don't include the await keyword ,the function will not pause and wait for the asynchronous genSalt() function to complete, it will return a promise directly, and the code will continue executing without waiting for the result of genSalt().
-it is used with asynchronous functions to pause the execution of code until the awaited asynchronous operation is complete. 
-salt" is a random value that is added to a password before hashing it. The primary purpose of using a salt is to increase the security of password 


const passwordHash = await bcrypt.hash(password, salt);
This function takes two arguments: the password that needs to be hashed and the salt generated in the previous step.




const newUser = new User({
      firstName,
      lastName,
      email......
Creating and Saving the User:
-The function then creates a new instance of the User model with the extracted user data, including the hashed password. 
 -it generates and assigns random values to viewedProfile and impressions fields.



 const savedUser = await newUser.save();
 *Inside the try block, the function attempts to save the new user (represented by the newUser object) to the database using the newUser.save() method. 
 *By using await, the function pauses and waits for the newUser.save() promise to be resolved before proceeding. This ensures that the user is saved before moving on to the next line of code.



res.status(201).json(savedUser);
If the user is successfully saved to the database, the function sets the HTTP status code to 201 (Created) using res.status(201)
 and sends the saved user object as a JSON response using res.json(savedUser).


catch (err) {
    res.status(500).json({ error: err.message });
  }
If an error occurs during the saving process, the function jumps to the catch block, and the error is caught in the err parameter. The function then sets the HTTP status code to 500 (Internal Server Error) and sends an error response as JSON with the error message using res.json({ error: err.message }).